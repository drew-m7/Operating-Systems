This assignment was quite interesting to me to try and implement and I ended up having to spend quite a lot of time getting it to work.
I am pretty happy with my outcome overall for this assignment. I was able to get everything working for the most part, including detecting
different operators such as <*, &, and fg. The program is able to run continuously until the exit and executes commands depending on what was 
specified by the user. For my code, I have two supporting functions. One parses through the reverse commands using strtok and finds the lists size.
The other one is used to detect where the <* redirection symbol is located. For the main method, I first set up the initial aspects for my program
and prompt the user with the dmart2> prompt. I used fgets to read in the input from the prompt line. All of this is to be executed within the do while
loop that will run so long as exit is not entered. Within the loop I have added many if statements to scan through the command list and find out if the
user has included any unique specified operators, such as foreground, background, and redirection. If one is specified, it will detect it and execute within
that block of code. For executing the commands I used fork to create the child process for the command to be run in. I also have included many print statements
to try and detect if any errors have occured. I ended up having to use execvp because it made more sense to me and worked better in my opinion. 
Execvp and execlp are very similar except one passes args as a list and the other passes as array. Overall, the program runs quite well. Any basic foreground 
commands run successfully, such as "ls", "pwd", "Makefile cat", "-l ls". Also, any redirections work successfully also, such as "out.txt <* Makefile cat"
or "out2.txt <* -l ls". The foreground and background functionality also work for the most part but I didn't have enough time to perfect these commands.
Overall, the program is quite good I think and I learned a lot from spending hours working on it. It successfully implements most all the functionality listed
in the assignment and runs without error. The program compiles successfully without any errors also. Looking back on the program implementation, while
it seemed a very difficult task at the beginning, it is actually a somewhat simple design where you just have to detect what the reverse command includes
and then fork and execute in a child process according to what is to be done based on the users input.
